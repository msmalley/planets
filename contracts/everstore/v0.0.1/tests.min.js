pragma solidity ^0.4.18;

// Private Owner = 0xB7a43A245e12b69Fd035EA95E710d17e71449f96
// v0.0.1 - Addresses Only = 0xE2567b651996bB44bC0816C2FBEB5630f9E14d08 = 0.2
// v0.0.1 - Basics X 4 = 0xBf75524213428476328323EcE2324e964A10A2f9 = 0.51

// MS Personal = 0x7d0C58E478479c8f6f5A96C2424d6AE4F82980e0

contract AbleToUtilizeStrings
{
    function bytes32ToString(bytes32 x) internal pure returns (string) 
    {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) 
        {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) 
            {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory bytesStringTrimmed = new bytes(charCount);
        for (j = 0; j < charCount; j++) 
        {
            bytesStringTrimmed[j] = bytesString[j];
        }
        return string(bytesStringTrimmed);
    }
    
    function stringToBytes32(string memory source) internal pure returns (bytes32 result) 
    {
        bytes memory tempEmptyStringTest = bytes(source);
        if (tempEmptyStringTest.length == 0) 
        {
            return 0x0;
        }
        assembly 
        {
            result := mload(add(source, 32))
        }
    }
    
    function uintToString(uint i) internal pure returns (string) 
    {
        if (i == 0) return "0";
        uint j = i;
        uint length;
        while (j != 0)
        {
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint k = length - 1;
        while (i != 0)
        {
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    
    function combine(string _a, string _b, string _c, string _d, string _e) internal pure returns (string)
    {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }
    
    function char(byte b) internal pure returns (byte c) 
    {
        if (b < 10) return byte(uint8(b) + 0x30);
        else return byte(uint8(b) + 0x57);
    }
    
    function toString(address x) public pure returns (string) 
    {
        bytes memory s = new bytes(40);
        for (uint i = 0; i < 20; i++) 
        {
            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));
            byte hi = byte(uint8(b) / 16);
            byte lo = byte(uint8(b) - 16 * uint8(hi));
            s[2*i] = char(hi);
            s[2*i+1] = char(lo);            
        }
        return string(s);
    }
}

library UsingSafeMaths
{
    function add(uint a, uint b) internal pure returns (uint c) 
    {
        c = a + b;
        require(c >= a);
    }

    function sub(uint a, uint b) internal pure returns (uint c) 
    {
        require(b <= a);
        c = a - b;
    }

    function mul(uint a, uint b) internal pure returns (uint c) 
    {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function div(uint a, uint b) internal pure returns (uint c) 
    {
        require(b > 0);
        c = a / b;
    }
}

contract Upgradable is AbleToUtilizeStrings
{
    address public owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    function Upgradable() public 
    {
        owner = msg.sender;
    }

    modifier onlyOwner() 
    {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public 
    {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

contract AddressProxy is Upgradable
{
    function read(string key, address addressNull) public view returns(address);
    function set(string key, address value, address addressNull) public;
}

contract AddressesProxy is Upgradable
{
    function read(address addressIndex, string key, address addressNull) public view returns(address);
    function set(address addressIndex, string key, address value, address addressNull) public;
}

contract BoolProxy is Upgradable
{
    function read(string key, bool boolNull) public view returns(bool);
    function set(string key, bool value, bool boolNull) public;
}

contract BoolsProxy is Upgradable
{
    function read(address addressIndex, string key, bool boolNull) public view returns(bool);
    function set(address addressIndex, string key, bool value, bool boolNull) public;
}

contract UintProxy is Upgradable
{
    function read(string key, uint uintNull) public view returns(uint256);
    function set(string key, uint256 value, uint uintNull) public;
}

contract UintsProxy is Upgradable
{
    function read(address addressIndex, string key, uint uintNull) public view returns(uint256);
    function set(address addressIndex, string key, uint256 value, uint uintNull) public;
}

contract StringProxy is Upgradable
{
    function read(string key, string stringNull) public view returns(bytes32);
    function set(string key, bytes32 value, string stringNull) public;
}

contract StringsProxy is Upgradable
{
    function read(address addressIndex, string key, string stringNull) public view returns(bytes32);
    function set(address addressIndex, string key, bytes32 value, string stringNull) public;
}

contract tests is Upgradable
{
    AddressProxy Address;
    AddressesProxy Addresses;
    BoolProxy Bool;
    BoolsProxy Bools;
    UintProxy Uint;
    UintsProxy Uints;
    StringProxy _String;
    StringsProxy Strings;
    
 
    function tests(address proxyForAddress, address proxyForAddresses, address proxyForBool, address proxyForBools, address proxyForString, address proxyForStrings, address proxyForUint, address proxyForUints) public 
    {
        Address = AddressProxy(proxyForAddress);
        Addresses = AddressesProxy(proxyForAddresses);
        Bool = BoolProxy(proxyForBool);
        Bools = BoolsProxy(proxyForBools);
        _String = StringProxy(proxyForString);
        Strings = StringsProxy(proxyForStrings);
        Uint = UintProxy(proxyForUint);
        Uints = UintsProxy(proxyForUints);
    }
    
    function updateProxy(address proxyForAddress, address proxyForAddresses, address proxyForBool, address proxyForBools, address proxyForString, address proxyForStrings, address proxyForUint, address proxyForUints) public onlyOwner
    {
        Address = AddressProxy(proxyForAddress);
        Addresses = AddressesProxy(proxyForAddresses);
        Bool = BoolProxy(proxyForBool);
        Bools = BoolsProxy(proxyForBools);
        _String = StringProxy(proxyForString);
        Strings = StringsProxy(proxyForStrings);
        Uint = UintProxy(proxyForUint);
        Uints = UintsProxy(proxyForUints);
    }
    
    /*
    
    ADDRESSES
    
    */
    function setAddress(string key, address value) public
    {
        address addressNull;
        Address.set(key, value, addressNull);
    }
    function getAddress(string key) public view returns(address)
    {
        address addressNull;
        return Address.read(key, addressNull);
    }
    function setAddresses(address addressIndex, string key, address value) public
    {
        address addressNull;
        Addresses.set(addressIndex, key, value, addressNull);
    }
    function getAddresses(address addressIndex, string key) public view returns(address)
    {
        address addressNull;
        return Addresses.read(addressIndex, key, addressNull);
    }
    
    /*
    
    BOOLS
    
    */
    function setBool(string key, bool value) public
    {
        bool boolNull;
        Bool.set(key, value, boolNull);
    }
    function getBool(string key) public view returns(bool)
    {
        bool boolNull;
        return Bool.read(key, boolNull);
    }
    function setBools(address addressIndex, string key, bool value) public
    {
        bool boolNull;
        Bools.set(addressIndex, key, value, boolNull);
    }
    function getBools(address addressIndex, string key) public view returns(bool)
    {
        bool boolNull;
        return Bools.read(addressIndex, key, boolNull);
    }
    
    /*
    
    STRINGS
    
    */
    function setString(string key, string value) public
    {
        string memory stringNull;
        _String.set(key, stringToBytes32(value), stringNull);
    }
    function getString(string key) public view returns(string)
    {
        string memory stringNull;
        return bytes32ToString(_String.read(key, stringNull));
    }
    function setStrings(address addressIndex, string key, string value) public
    {
        string memory stringNull;
        Strings.set(addressIndex, key, stringToBytes32(value), stringNull);
    }
    function getStrings(address addressIndex, string key) public view returns(string)
    {
        string memory stringNull;
        return bytes32ToString(Strings.read(addressIndex, key, stringNull));
    }
    
    /*
    
    UINTS
    
    */
    function setUint(string key, uint56 value) public
    {
        uint uintNull;
        Uint.set(key, value, uintNull);
    }
    function getUint(string key) public view returns(uint256)
    {
        uint uintNull;
        return Uint.read(key, uintNull);
    }
    function setUints(address addressIndex, string key, uint256 value) public
    {
        uint uintNull;
        Uints.set(addressIndex, key, value, uintNull);
    }
    function getUints(address addressIndex, string key) public view returns(uint256)
    {
        uint uintNull;
        return Uints.read(addressIndex, key, uintNull);
    }
}